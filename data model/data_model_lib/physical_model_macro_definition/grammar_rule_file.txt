nonterminal function_definition function_interface block parameter_list par variable_sequence statement_sequence variable_declaration  statement assignment_statement branch_statement for_loop function_call return_process element expression if_else body element_list binary_expression unary_expression None ;
keyword { } ( ) if else for return delimiter ; 
terminal type function_name var assign_op value binary_op unary_op ;

function_definition = function_interface { block } ;
function_interface = type function_name ( parameter_list ) ;
parameter_list = par* ;
par = type var ;
block = variable_sequence statement_sequence ;
variable_sequence = variable_declaration* ;
variable_declaration = type var ;
statement_sequence = statement* ;
statement = assignment_statement ;
statement = branch_statement ;
statement = for_loop ;
statement = function_call ;
statement = return_process ;
assignment_statement = element assign_op element ;
assignment_statement = element assign_op expression ;
element = function_call ;
element = var ;
element = value ;
branch_statement = if_else ;
if_else = if ( expression ) { body } else { body } ;
body = statement ;
body = block ;
for_loop = for ( expression expression expression ) { body } ;
function_call = function_name ( element_list ) ;
element_list = element* ;
return_process = return var* ;
expression = binary_expression ;
expression = unary_expression ;
binary_expression = element binary_op element ;
unary_expression = unary_op element ;
unary_expression = element unary_op ;

None == delimiter ;